{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Nick\\\\Desktop\\\\P565-project-g5-Sprint03-Nick\\\\frontend\\\\src\\\\ResetPassword.js\";\nimport React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\n\nclass ResetPassword extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    };\n    console.log(this.state);\n    this.handleNewPassword = this.handleNewPassword.bind(this);\n    this.handleConfirmPassword = this.handleConfirmPassword.bind(this);\n    this.reset = this.reset.bind(this);\n    this.hashCode = this.hashCode.bind(this);\n  }\n\n  componentDidMount() {\n    let params = {};\n    let parts = window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (m, key, value) {\n      params[key] = value;\n    });\n    this.setState({\n      email: params.email\n    });\n  }\n\n  handleNewPassword(event) {\n    this.setState({\n      newPassword: event.target.value\n    });\n  }\n\n  handleConfirmPassword(event) {\n    this.setState({\n      confirmPassword: event.target.value\n    });\n  }\n\n  hashCode(s) {\n    let h = 0,\n        l = s.length,\n        i = 0;\n    if (l > 0) while (i < l) h = (h << 5) - h + s.charCodeAt(i++) | 0;\n    return h;\n  }\n\n  reset() {\n    if (this.state.newPassword.length < 10) {\n      alert(\"Password must be longer than 10 characters\");\n    } else if (this.state.newPassword != this.state.confirmPassword) {\n      alert(\"Passwords do not match.\");\n    } else {\n      //alert(\"success!\");\n      console.log(this.state);\n      Axios.post(\"http://localhost:8080/resetPassword\", {\n        email: this.state.email,\n        password: this.hashCode(this.state.newPassword)\n      }).then(response => {\n        console.log(response);\n\n        if (response.data.success) {\n          window.location.replace(\"http://localhost:3000/login\");\n        } else {\n          alert(\"That is not a registered email.\");\n        }\n      }, error => {\n        console.log(error);\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"recover-page\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"recoverForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Typography, {\n      className: \"emailLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \"New Password\"), React.createElement(TextField, {\n      variant: \"outlined\",\n      onChange: this.handleNewPassword,\n      className: \"email-input\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      className: \"emailLabel\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(TextField, {\n      variant: \"outlined\",\n      placeholder: \"\",\n      onChange: this.handleConfirmPassword,\n      className: \"email-input\",\n      type: \"password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      onClick: this.reset,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Reset\")));\n  }\n\n}\n\nexport default ResetPassword;","map":{"version":3,"sources":["C:\\Users\\Nick\\Desktop\\P565-project-g5-Sprint03-Nick\\frontend\\src\\ResetPassword.js"],"names":["React","Component","Typography","TextField","Button","Axios","ResetPassword","constructor","props","state","email","newPassword","confirmPassword","console","log","handleNewPassword","bind","handleConfirmPassword","reset","hashCode","componentDidMount","params","parts","window","location","href","replace","m","key","value","setState","event","target","s","h","l","length","i","charCodeAt","alert","post","password","then","response","data","success","error","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Axios from \"axios\";\n\nclass ResetPassword extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      newPassword: \"\",\n      confirmPassword: \"\"\n    };\n\n    console.log(this.state);\n\n    this.handleNewPassword = this.handleNewPassword.bind(this);\n    this.handleConfirmPassword = this.handleConfirmPassword.bind(this);\n    this.reset = this.reset.bind(this);\n    this.hashCode = this.hashCode.bind(this);\n  }\n\n  componentDidMount() {\n    let params = {};\n    let parts = window.location.href.replace(\n      /[?&]+([^=&]+)=([^&]*)/gi,\n      function(m, key, value) {\n        params[key] = value;\n      }\n    );\n    this.setState({ email: params.email });\n  }\n\n  handleNewPassword(event) {\n    this.setState({ newPassword: event.target.value });\n  }\n\n  handleConfirmPassword(event) {\n    this.setState({ confirmPassword: event.target.value });\n  }\n\n  hashCode(s) {\n    let h = 0,\n      l = s.length,\n      i = 0;\n    if (l > 0) while (i < l) h = ((h << 5) - h + s.charCodeAt(i++)) | 0;\n    return h;\n  }\n\n  reset() {\n    if (this.state.newPassword.length < 10) {\n      alert(\"Password must be longer than 10 characters\");\n    } else if (this.state.newPassword != this.state.confirmPassword) {\n      alert(\"Passwords do not match.\");\n    } else {\n      //alert(\"success!\");\n      console.log(this.state);\n\n      Axios.post(\"http://localhost:8080/resetPassword\", {\n        email: this.state.email, \n        password: this.hashCode(this.state.newPassword)\n      }).then(\n        response => {\n          console.log(response);\n          if (response.data.success) {\n            window.location.replace(\n              `http://localhost:3000/login`\n            );\n          } else {\n            alert(\"That is not a registered email.\");\n          }\n        },\n        error => {\n          console.log(error);\n        }\n      );\n\n    }\n  }\n\n  render() {\n    return (\n      <div id=\"recover-page\">\n        <div className=\"recoverForm\">\n          <Typography className=\"emailLabel\">New Password</Typography>\n          <TextField\n            variant=\"outlined\"\n            onChange={this.handleNewPassword}\n            className=\"email-input\"\n            type=\"password\"\n          />\n          <Typography className=\"emailLabel\">Confirm Password</Typography>\n          <TextField\n            variant=\"outlined\"\n            placeholder=\"\"\n            onChange={this.handleConfirmPassword}\n            className=\"email-input\"\n            type=\"password\"\n          />\n          <Button variant=\"contained\" color=\"primary\" onClick={this.reset}>\n            Reset\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ResetPassword;\n"]},"metadata":{},"sourceType":"module"}