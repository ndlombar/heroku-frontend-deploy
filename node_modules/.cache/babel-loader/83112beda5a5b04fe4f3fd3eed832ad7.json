{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getColor = exports.getBreakpointSize = exports.getConcreteBreakpointSize = exports.getHeight = exports.getWidth = exports.getFontFamily = exports.getFontSize = exports.getFontWeight = exports.getBorderRadius = exports.getBorder = exports.getPadding = exports.getMargin = exports.getBoxShadow = exports.makeGetter = exports.getConfigProperty = void 0;\n\nvar _theme = require(\"../theme\"); // ---------------------------------------------------------------------------\n\n\nvar getConfigProperty = function getConfigProperty(theme) {\n  // Function for getting values from themes\n  var getterFunction = function getterFunction() {\n    for (var _len2 = arguments.length, path = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      path[_key2] = arguments[_key2];\n    }\n\n    return getConfigProperty.apply(void 0, [theme].concat(path));\n  }; // Function for gettings values from objects while 'dereferencing' all\n  // functional values\n\n\n  var receiveValueSafe = function receiveValueSafe(initialValue) {\n    var value = initialValue;\n\n    for (var _len3 = arguments.length, path = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      path[_key3 - 1] = arguments[_key3];\n    }\n\n    for (var i = 0; value !== undefined && i < path.length; i += 1) {\n      var tempValue = value[path[i]];\n\n      while (typeof tempValue === 'function') {\n        tempValue = tempValue(getterFunction);\n      }\n\n      value = tempValue;\n    }\n\n    return value;\n  };\n\n  for (var _len = arguments.length, propertyPath = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    propertyPath[_key - 1] = arguments[_key];\n  }\n\n  var value = receiveValueSafe.apply(void 0, [theme].concat(propertyPath)); // Use default theme if property is not found in current theme\n\n  if (value === undefined) {\n    return receiveValueSafe.apply(void 0, [_theme.theme].concat(propertyPath));\n  }\n\n  return value;\n}; // Helper for creating basic getter function for acessor's config properies\n\n\nexports.getConfigProperty = getConfigProperty;\n\nvar makeGetter = function makeGetter(property) {\n  return function (props, accessor) {\n    for (var _len4 = arguments.length, path = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n      path[_key4 - 2] = arguments[_key4];\n    }\n\n    return getConfigProperty.apply(void 0, [props.theme, accessor, property].concat(path));\n  };\n}; // ---------------------------------------------------------------------------\n\n\nexports.makeGetter = makeGetter;\nvar getBoxShadow = makeGetter('boxShadow');\nexports.getBoxShadow = getBoxShadow;\nvar getMargin = makeGetter('margin');\nexports.getMargin = getMargin;\nvar getPadding = makeGetter('padding');\nexports.getPadding = getPadding;\nvar getBorder = makeGetter('border');\nexports.getBorder = getBorder;\nvar getBorderRadius = makeGetter('borderRadius');\nexports.getBorderRadius = getBorderRadius;\nvar getFontWeight = makeGetter('fontWeight');\nexports.getFontWeight = getFontWeight;\nvar getFontSize = makeGetter('fontSize');\nexports.getFontSize = getFontSize;\nvar getFontFamily = makeGetter('fontFamily');\nexports.getFontFamily = getFontFamily;\nvar getWidth = makeGetter('width');\nexports.getWidth = getWidth;\nvar getHeight = makeGetter('height');\nexports.getHeight = getHeight;\n\nvar getConcreteBreakpointSize = function getConcreteBreakpointSize(props, size) {\n  return getConfigProperty(props.theme, 'screenSize', size);\n};\n\nexports.getConcreteBreakpointSize = getConcreteBreakpointSize;\n\nvar getBreakpointSize = function getBreakpointSize(props) {\n  if (props.sm || props.expandSm) {\n    return getConcreteBreakpointSize(props.theme, 'sm');\n  } else if (props.md || props.expandMd) {\n    return getConcreteBreakpointSize(props.theme, 'md');\n  } else if (props.lg || props.expandLg) {\n    return getConcreteBreakpointSize(props.theme, 'lg');\n  } else if (props.xl || props.expandXl) {\n    return getConcreteBreakpointSize(props.theme, 'xl');\n  }\n\n  return '';\n};\n\nexports.getBreakpointSize = getBreakpointSize;\n\nvar getColor = function getColor(props, accessor) {\n  var availableColors = Object.keys(_theme.theme.colorScheme);\n\n  for (var _len5 = arguments.length, path = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n    path[_key5 - 2] = arguments[_key5];\n  }\n\n  for (var i = 0; i < availableColors.length; i += 1) {\n    var color = availableColors[i];\n\n    if (props[color]) {\n      return getConfigProperty.apply(void 0, [props.theme, accessor, 'colors', color].concat(path));\n    }\n  } // Default\n\n\n  return getConfigProperty.apply(void 0, [props.theme, accessor, 'colors', 'default'].concat(path));\n};\n\nexports.getColor = getColor;","map":null,"metadata":{},"sourceType":"script"}